Simple use of the C preprocessor
================================

Here we show how you can use the `C` preprocessor with franchise.  Here's
an example of a simple executable that will fail if `DATA` is not a `cpp`
macro:

~~~~ tests/cpp/executable.hs
main = if DATA then putStrLn "It works." else putStrLn "Ooops."
~~~~

Franchise behaves very much like autoconf in its treatment of `cpp`
defines.  You can instruct it to [define][] a macro or you can use [defineAs][]
to set a macro to some `String` value.  In this case, we [defineAs][] `DATA`
to be `"True"`, since in the above program, `DATA` is used as a `Bool`
type.

[define]: haddock/Distribution-Franchise-V1.html#v%3Adefine
[defineAs]: haddock/Distribution-Franchise-V1.html#v%3AdefineAs

Note that we also use the [ghcFlags][] macro to add the `-cpp` flag to the
list of flags passed to `ghc`.  We could alternatively have asked for `cpp`
in a pragma in the `executable.hs` file.

[ghcFlags]: haddock/Distribution-Franchise-V1.html#v%3AghcFlags

~~~~ tests/cpp/Setup.hs
import Distribution.Franchise.V1

main = build [] $
       do defineAs "DATA" "True"
          ghcFlags ["-cpp"]
          executable "executable" "executable.hs" []
~~~~

And finally we'll test that this executable actually builds and runs,
giving the proper answer.

~~~~ tests/cpp/cpp.sh
set -ev
runghc Setup.hs build
./executable
./executable | grep works
~~~~
