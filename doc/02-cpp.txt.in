Simple use of the C preprocessor
================================

Here we show how you can use the `C` preprocessor with franchise.  Here's
an example of a simple executable that will fail if `DATA` is not a `cpp`
macro:

~~~~ tests/cpp/executable.hs
{-# LANGUAGE CPP #-}
main = if DATA then putStrLn "It works." else putStrLn "Ooops."
~~~~

Franchise behaves very much like autoconf in its treatment of `cpp`
defines.  You can instruct it to [define][] a macro or you can use [defineAs][]
to set a macro to some `String` value.  In this case, we [defineAs][] `DATA`
to be `"True"`, since in the above program, `DATA` is used as a `Bool`
type.

[define]: haddock/Distribution-Franchise-V1.html#v%3Adefine
[defineAs]: haddock/Distribution-Franchise-V1.html#v%3AdefineAs

Note that we used a `LANGUAGE` pragma above to tell the compiler to
use run the C preprocessor over the file.  We could alternatively have
used the [ghcFlags][] function to add the `-cpp` flag to the list of
flags passed to `ghc`, and the [jhcFlags][] function to pass `-fcpp`
to `jhc`.  This would just be a bit more work to support both `ghc`
and `jhc`.  If both compilers were to accept the same command-line
flag, we could have used [hcFlags][].

[ghcFlags]: haddock/Distribution-Franchise-V1.html#v%3AghcFlags
[jhcFlags]: haddock/Distribution-Franchise-V1.html#v%3AjhcFlags
[hcFlags]: haddock/Distribution-Franchise-V1.html#v%3AhcFlags

~~~~ tests/cpp/Setup.hs
import Distribution.Franchise.V1

main = build [] $
       do defineAs "DATA" "True"
          executable "executable" "executable.hs" []
~~~~

And finally we'll test that this executable actually builds and runs,
giving the proper answer.

~~~~ tests/cpp/cpp.sh
set -ev
runghc Setup.hs build
./executable
./executable | grep works

if which jhc; then
  # we have jhc, so we should be able to compile with it!
  runghc Setup.hs distclean
  runghc Setup.hs build --jhc
  ./executable | grep works
else
  echo alack, we cannot test on jhc
fi
~~~~
