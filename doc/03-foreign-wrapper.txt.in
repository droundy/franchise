
A foreign function interface wrapper
====================================

This example demonstrates how to compile an executable that uses the FFI to
export a Haskell function to C.  This is actually quite easy.

The C source
------------

Our C example is a simple function that accepts a function returning
an int and prints out its value.

~~~~ tests/foreign-wrapper/printit.c
#include <stdio.h>

void printit(int (*x)()) { printf("It is %d\n", x()); }
~~~~

The Haskell source
------------------

We put the ffi interactions into a module called `TestModule`, which will
export two functions, `wrap`, which converts a Haskell function in to a C
function pointer, and `printit`, which accepts a C function pointer and
prints its output.

~~~~ tests/foreign-wrapper/TestModule.hs
module TestModule ( wrap, printit ) where

import Foreign.C.Types ( CInt )
import Foreign.Ptr ( FunPtr )

foreign import ccall "wrapper" wrap :: IO CInt
                                    -> IO (FunPtr (IO CInt))
foreign import ccall "printit" printit
      :: FunPtr (IO CInt) -> IO ()
~~~~

The main function, meanwhile, just uses the two functions defined in
`TestModule` to print the number 137.

~~~~ tests/foreign-wrapper/test.hs
module Main where
import TestModule

main = do fp <- wrap (return 137)
          printit fp
~~~~

The Setup.hs file
-----------------

Here's the ``Setup.hs`` file.  The only trickiness we need is to use
[hcFlags][] tell the compiler to use the FFI.  This could
alternatively have been achieved using a pragma at the top of the
`TestModule.hs` file.

[hcFlags]: haddock/Distribution-Franchise-V1.html#v%3AhcFlags

~~~~ tests/foreign-wrapper/Setup.hs
import Distribution.Franchise.V1

main = build [] $
       do hcFlags ["-fffi"]
          executable "test" "test.hs" ["printit.c"]
~~~~

A simple test script
--------------------

~~~~ tests/foreign-wrapper/foreign-wrapper.sh
set -ev
runghc Setup.hs build
./test
./test | grep 137

if ! which jhc; then
  echo we can not test on jhc as it is not available
  exit 0
fi

# actually ffi support isn't yet there for jhc
exit 0

# we have jhc, so we should be able to compile with it!
runghc Setup.hs distclean
runghc Setup.hs configure --jhc
runghc Setup.hs build
./test
./test | grep 137

~~~~
