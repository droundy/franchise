Using hpc to test program coverage
==================================

Franchise has support for using Haskell Program Coverage to determine
the coverage of your test suite.  To properly demonstrate how to do
this, we'll need an example that is somewhat larger.  Note, however,
that hpc doesn't seem to work with packages, at least as of ghc
6.8.2.

~~~~ tests/hpc/Foo.hs
module Foo where
foo = "hello world"
upperFoo = "Hello world"
~~~~

~~~~ tests/hpc/Foo/Bar.hs
module Foo.Bar where
foobar ('H':r) = 'h':r
foobar ('h':r) = 'H':r
foobar x = x
~~~~

~~~~ tests/hpc/main.hs
import Foo
import Foo.Bar
main = do x <- getLine
          case x of
            [] -> putStrLn $ foobar foo
            ('h':_) -> putStrLn $ foobar upperFoo
            _ -> putStrLn $ foobar "Goodbye world"
~~~~

This is just a hello world that waits for some input, and uses a
couple of modules.  To make things more exciting, we'll add a simple
test suite for this program.

~~~~ tests/hpc/testfoo.bash
set -ev
echo | ./main | grep Hello
~~~~

~~~~ tests/hpc/testupperFoo.bash
set -ev
echo hello there | ./main | grep hello
~~~~

~~~~ tests/hpc/testBye.bash
set -ev
echo good morning | ./main | grep Goodbye
~~~~

Setup.hs
--------

~~~~ tests/hpc/Setup.hs
import Distribution.Franchise

main = build [configurableProgram "shell" "shsh" ["bash","sh"]] $
       do let mytests = ["testfoo.bash", "testupperFoo.bash", "testBye.bash"]
          sh <- configuredProgram "shell"
          mapM_ (\x -> testOne x sh x) mytests
          test mytests
          executable "main" "main.hs" []
~~~~

Testing it out
--------------

First we'll run the actual tests, and then we'll see if we indeed have
achieved 100% coverage of all properties that hpc tests.

~~~~ tests/hpc/hpc.sh
set -ev

if ! hpc help; then
  runghc Setup.hs test --verbose
  exit 0
fi

# we have hpc, so we can test for full code coverage
runghc Setup.hs --enable-hpc test

# quit early if we either don't support globbing or aren't using a
# ghc 6.8.3 or later (which understands where to put the tix files)
echo tix/*.tix | grep main || exit 0

hpc report tix/*.tix > alltests
hpc report tix/*.tix | grep 100 > passedtests
cat alltests
cat passedtests
cmp alltests passedtests
~~~~

