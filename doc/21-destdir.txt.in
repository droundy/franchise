Using DESTDIR to build a binary package
=======================================

Sometimes you might want to redirect the install into another
directory, for instance if you're building a Debian package.   The
standard way to do this is with the DESTDIR environment variable.
Franchise supports this approach, but you'd best use copy rather than
install, so as to avoid running scripts that won't quite work.

Here as an example, I'll use a project that includes both a Haskell
package and an executable.

~~~~ tests/destdir/Greet.hs
module Greet where
greet = putStrLn "hello world"
~~~~

~~~~ tests/destdir/hello-world.hs
import Greet
main = greet
~~~~

~~~~ tests/destdir/Setup.hs
import Distribution.Franchise.V1

main = build [] $ do version "1.0.137"
                     package "greet" ["Greet"] []
                     executable "hello" "hello-world.hs" []
~~~~

Testing it out
--------------

~~~~ tests/destdir/destdir.sh
set -ev

runghc Setup.hs configure --user --prefix=$HOME/local

DESTDIR=`pwd`/foobar runghc Setup.hs copy

if echo $HOME | grep :; then
  echo cannot test in windows
else
  ./foobar$HOME/local/bin/hello
fi

# The config file shouldn't "know" about the DESTDIR
grep foobar foobar$HOME/local/lib/greet*/*/greet.cfg && exit 1

if echo $HOME | grep :; then
  echo cannot test in windows
else
  ls foobar$HOME/local/lib/greet*/*/greet.cfg
fi

# to finish the install, we would need to run the register script
runghc Setup.hs register unregister --gen-script
ls register*

grep ghc-pkg register*
grep ghc-pkg unregister*

if echo $HOME | grep :; then
  echo cannot test in windows
else
  # let's see if an "install" actually works!
  cp -r foobar$HOME/local/lib/* $HOME/local/lib/
  ./register*
  
  # now let's unregister...
  ./unregister*
fi
~~~~
