Introduction to franchise
-------------------------

Franchise is a configuration and build system for Haskell projects.  The
configure system employed in franchise is designed to be easily forward and
backward compatible, meaning that you shouldn't need to change your
Setup.hs file in order to compile with a new version of ghc, and if you
*do* need to make a change in your Setup.hs file, it shouldn't force users
who have an older version of franchise and/or ghc to upgrade either their
compiler or their copy of franchise.

One goal of franchise is to not require developers to provide redundant
information.  For instance, you've already listed all the modules you use,
and ghc already knows which modules are present in which packages, so
there's in general no need for you to list the packages that you require,
much less their versions.  This enhances both forwards and backwards
compatibility, and just plain makes your life easier.  If a particular
module is provided by more than one package, you may need to disambiguate,
but that's not the common case.

Perhaps also worth mentioning is that franchise supports parallel
builds similar to make -j, with the same interface, in fact, which is
./Setup.hs -j.  Franchise currently only works with ghc and jhc, but
it does run on Windows, and supports cross-compiling with jhc.

The package name "franchise" stands for "Fun, relaxing and calming Haskell
into Saturday evening."  It is also something of an antonym of "cabal,"
since "franchise" means the right to vote.  Which also fits in with the
concept of allowing the code to decide on its own dependencies.  Franchise
is made up of mostly pretty ugly code, with a small amount of pretty
beautiful code.  But it was all code that was fun and relaxing to write.

It you want to have argumentative, stressful conversations, please don't do
so on the subject of fun, relaxing and calming code.
